name: 2.0tag  # 워크플로우 이름
on:
  push:
    branches:
      - 'master'  # master 브랜치에 푸시 이벤트가 발생할 때 트리거
    tags:
      - '**'  # 모든 태그 푸시 이벤트에서 트리거

jobs:
  push:
    runs-on: ubuntu-latest  # GitHub Actions가 최신 우분투 환경에서 실행됨
    steps:
      - name: Checkout  # 소스 코드 체크아웃
        uses: actions/checkout@v2  # 저장소의 코드를 워크플로우로 가져오기 위한 액션 사용
        
      - name: Docker meta  # Docker 이미지의 메타데이터를 생성하는 단계
        id: docker_meta  # 이 단계의 ID는 이후 단계에서 참조 가능
        uses: crazy-max/ghaction-docker-meta@v1  # Docker 메타데이터 생성 액션
        with:
          images: sushijin/nodejs-ci  # 내 Docker Hub 레포지토리 이름
          tags: |
            v2.0  # 명시적으로 v2.0 태그를 지정
            
      - name: Set up QEMU  # QEMU 설정 단계
        uses: docker/setup-qemu-action@v2  # 멀티 아키텍처 빌드를 지원하기 위한 QEMU 설치
        
      - name: Set up Docker Buildx  # Docker Buildx 설정 단계
        uses: docker/setup-buildx-action@v2  # 멀티 플랫폼 빌드를 지원하는 Docker Buildx 설치
        
      - name: Login to Docker Hub  # Docker Hub 로그인 단계
        uses: docker/login-action@v2  # Docker Hub에 로그인하는 액션 사용
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}  # GitHub Secrets에서 Docker Hub 사용자 이름 가져옴
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}  # GitHub Secrets에서 Docker Hub 비밀번호 가져옴
          
      - name: Build and push Docker Image  # Docker 이미지를 빌드하고 푸시하는 단계
        uses: docker/build-push-action@v4  # Docker 이미지를 빌드 및 푸시하는 액션 사용
        with:
          context: .  # Docker 빌드 컨텍스트(현재 디렉토리)
          push: true  # 이미지를 Docker Hub에 푸시
          tags: ${{ steps.docker_meta.outputs.tags }}  # Docker meta 단계에서 생성된 태그 사용
          labels: ${{ steps.docker_meta.outputs.labels }}  # Docker meta 단계에서 생성된 라벨 사용
